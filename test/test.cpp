#include <stdexcept>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include "pack109.hpp"

template <class T>
int test(const char* label, T lhs, T rhs) {
  printf("%s: ", label);
  if (lhs==rhs) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs=%lx\n", lhs);
    printf("  rhs=%lx\n", rhs);
    exit(1);
  }
}


int testStruct(const char* label, Person lhs, Person rhs){
 printf("%s: ", label);
  if (lhs.age ==rhs.age && lhs.height == rhs.height && lhs.name == rhs.name) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs=%s\n", lhs);
    printf("  rhs=%s\n", rhs);
    exit(1);
  } 
}

int testvec(const char* label, vec lhs, vec rhs) {
  printf("%s: ", label);
  if (lhs==rhs) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs="); pack109::printVec(lhs); printf("\n");
    printf("  rhs="); pack109::printVec(rhs); printf("\n");
    exit(1);
  }
}


int main() {

  // Test bool

  // True
  vec v1{0xa0};
  vec bytes1 = pack109::serialize(true);
  testvec("Test 1 - true ser", bytes1, v1);

  bool bool_true = pack109::deserialize_bool(bytes1);
  test("Test 2 - true de", bool_true, true);
 

  // False
  vec v2{0xa1};
  vec bytes2 = pack109::serialize(false);
  testvec("Test 3 - false ser", bytes2, v2);

  bool bool_false = pack109::deserialize_bool(bytes2); 
  test("Test 4 - false de", bool_false, false);

  // Test Integers

  // u8
  u8 item1 = 0x42;
  vec v3{0xa2, 0x42}; 
  vec bytes3 = pack109::serialize(item1);
  testvec("Test 5 - u8 ser", bytes3, v3);
  
  u8 int_u8 = pack109::deserialize_u8(bytes3);  
  test("Test 6 - u8 de", int_u8, item1);

  // u32
  u32 item2 = 0x42367194;
  vec v4{0xa3, 0x42, 0x36, 0x71, 0x94};
  vec bytes4 = pack109::serialize(item2);
  testvec("Test 7 - u32 ser", bytes4, v4);

  u32 int_u32 = pack109::deserialize_u32(bytes4);
  test("Test 8 - u32 de", int_u32, item2);

  // u64
  u64 item3 = 0x4236719492785412;
  vec v5{0xa4, 0x42, 0x36, 0x71, 0x94, 0x92, 0x78, 0x54, 0x12};
  vec bytes5 = pack109::serialize(item3);
  testvec("Test 9 - u64 ser", bytes5, v5);
  u64 int_u64 = pack109::deserialize_u64(bytes5);
  test("Test 10 - u64 de", int_u64, item3); 

  // i8
  i8 item4 = 0x42;
  vec v6{0xa5, 0x42};
  vec bytes6 = pack109::serialize(item4);
  testvec("Test 11 - i8 ser", bytes6, v6);
  i8 int_i8 = pack109::deserialize_i8(bytes6);
  test("Test 12 - i8 de", int_i8, item4);

  // i32
  i32 item5 = 0x42367194; 
  vec v7{0xa6, 0x42, 0x36, 0x71, 0x94};
  vec bytes7 = pack109::serialize(item5);
  testvec("Test 13 - i32 ser", bytes7, v7);
  i32 int_i32 = pack109::deserialize_i32(bytes7);
  test("Test 14 - i32 de", int_i32, item5);

  // i64
  i64 item6 = 0x4236719492785412;
  vec v8{0xa7, 0x42, 0x36, 0x71, 0x94, 0x92, 0x78, 0x54, 0x12};
  vec bytes8 = pack109::serialize(item6);
  testvec("Test 15 - i64 ser", bytes8, v8);
  i64 int_i64 = pack109::deserialize_i64(bytes8);
  test("Test 16 - i64 de", int_i64, item6);

  // Test Floats

  // f32
  f32 item7 = 98765.4321;
  vec v9{0xa8, 0x47, 0xc0, 0xe6, 0xb7};
  vec bytes9 = pack109::serialize(item7);
  testvec("Test 17 - f32 ser", bytes9, v9);
  f32 float_f32 = pack109::deserialize_f32(bytes9);
  test("Test 18 - f32 de", float_f32, item7);

  // f64
  f64 item8 = 123456789.987654321;
  vec v10{0xa9, 0x41, 0x9d, 0x6f, 0x34, 0x57, 0xf3, 0x5b, 0xa8};
  vec bytes10 = pack109::serialize(item8);
  testvec("Test 19 - f64 ser", bytes10, v10);
  f64 float_f64 = pack109::deserialize_f64(bytes10);
  test("Test 20 - f64 de", float_f64, item8);

  // Test Strings

  // s8
  string item9 = "test";
  vec v11{0xaa, 0x04, 0x74, 0x65, 0x73, 0x74};
  vec bytes11 = pack109::serialize(item9);
  testvec("Test 21 - s8 ser", bytes11, v11);
  string string_s8 = pack109::deserialize_string(bytes11);
  test("Test 22 - s8 de", string_s8, item9);
  
  // Test Vectors

  // a8
  vec item10 = {5, 8, 1, 5, 7, 3};
  vec v12 = {0xac, 0x06, 0x05, 0x08, 0x01, 0x05, 0x07, 0x03};
  vec bytes12 = pack109::serialize(item10);
  testvec("Test 23 - a8 ser", bytes12, v12);
  vec vec_a8 = pack109::deserialize_vec_u8(bytes12);
  test("Test 24 - a8 de", vec_a8, item10);


  // Test Maps

  // m8
  Person item11 = {51, 2.3, "Aaron"};
  vec v13 = {0xae, 0x01, 0xaa, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xae, 0x03, 0xaa, 0x03, 0x61, 0x67, 0x65, 0xa2, 0x33, 0xaa, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0xa8, 0x40, 0x13, 0x33, 0x33, 0xaa, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xaa, 0x05, 0x41, 0x61, 0x72, 0x6f, 0x6e};
  vec bytes13 = pack109::serialize(item11);
  testvec("Test 25 - m8 ser", bytes13, v13);
  Person map_m8 = pack109::deserialize_person(bytes13);
  testStruct("Test 26 - m8 de", map_m8, item11);


  // s16
  string item12 = "Networking involves the communication between two or more computers over a channel, which can be either wired or wireless. This communication occurs through the exchange of byte streams, where bytes from one computer are transmitted to another, prompting the.";
  vec v14{0xab, 0x01, 0x03, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x77, 0x69, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x2e};
  vec bytes14 = pack109::serialize(item12);
  testvec("Test 27 - s16 ser", bytes14, v14);
  string string_s16 = pack109::deserialize_string(bytes14);
  test("Test 28 - s16 de", string_s16, item12);

  // a8
  std::vector<u64> item13 = {0x4236719492785412, 0x1246719522125496, 0x6478713122125626, 0x6568798122178664};
  vec v15{0xac, 0x04, 0x42, 0x36, 0x71, 0x94, 0x92, 0x78, 0x54, 0x12, 0x12, 0x46, 0x71, 0x95, 0x22, 0x12, 0x54, 0x96, 0x64, 0x78, 0x71, 0x31, 0x22, 0x12, 0x56, 0x26, 0x65, 0x68, 0x79, 0x81, 0x22, 0x17, 0x86, 0x64};
  vec bytes15 = pack109::serialize(item13);
  testvec("Test 29 - a8_u64 ser", bytes15, v15);
  std::vector<u64> vec_a8_u64 = pack109::deserialize_vec_u64(bytes15);
  test("Test 30 - a8_u64 de", vec_a8_u64, item13);

  return 0;
}
